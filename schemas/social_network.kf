database social_network;

// table for storing users
// each wallet can have a user
table users {
    id int primary notnull,
    username text notnull unique minlen(5) maxlen(32),
    age int notnull max(69),
    address text notnull unique // wallet address
}
// table for storing posts
table posts {
    id int primary notnull,
    title text notnull maxlen(300),
    content text notnull maxlen(10000),
    author_id int notnull,
    post_date text notnull
}
// table to track who likes certain posts
table likes {
    user_id int notnull,
    post_id int notnull,
    #like_index primary(user_id, post_id)
}
// table for follower relationships
table followers {
    follower_id int notnull,
    followed_id int notnull,
    #follower_index primary(follower_id, followed_id)
}

// table for managing admin roles on the network
table admin_table {
    wallet_address text notnull,
    admin_access int min(0) max(1),
    #admin_index primary(wallet_address, admin_access)
}

// private action for assigning admin
action set_admin($address, $access) private {
    INSERT INTO admin_table
    VALUES ($address, $access);
}

// a public action for creating a user
action create_user ($id, $username, $age) public {
    INSERT INTO users
    VALUES ($id, $username, $age, @caller);
}
// a public action for updating mutable user data
action update_user ($username, $age) public {
    UPDATE users
    SET username=$username, age=$age
    WHERE address=@caller;
}
// action for posting
// the date string must be provided by the client’s local time.  In the (near) future, we will support an @block modifier’
// date value is YYYY-MM-DD
action create_post ($id, $title, $content, $date_string) public {
    INSERT INTO posts (id, title, content, author_id, post_date)
    VALUES ($id, $title, $content, (
        SELECT id
        FROM users
        WHERE address=@caller
    ), $date_string);
}
// action for deleting posts posted by the caller
// it is important to use a subquery here instead of a join,
// since delete joins are not yet supported
action delete_post ($id) public {
    DELETE FROM posts
    WHERE id=$id
    AND author_id = (
        SELECT id
        FROM users
        WHERE address=@caller
    );
}
// action for liking posts
action like_post($post_id) public {
    INSERT INTO likes (user_id, post_id)
    VALUES ((
        SELECT id
        FROM users
        WHERE address = @caller
    ),
    $post_id);
}
// action for unliking a post
action unlike_post($post_id) public {
    DELETE FROM likes
    WHERE post_id=$post_id
    AND user_id = (
        SELECT id
        FROM users
        WHERE address=@caller
    );
}
// action for following a user
action follow($username) public {
    INSERT INTO followers (follower_id, followed_id)
    VALUES ((SELECT id FROM users WHERE address = @caller),
    (SELECT id FROM users WHERE username = $username));
}
// unfollow a user
// since Kwil does not support joins in deletes,
// we double subquery
action unfollow($username) public {
    DELETE FROM followers
    WHERE followers.followed_id = (SELECT id FROM users WHERE username = $username)
    AND followers.follower_id = (SELECT id FROM users WHERE address = @caller);
}
// getters
action get_user_by_username($username) public {
    SELECT *
    FROM users
    WHERE username=$username;
}
action get_user_by_wallet($address) public {
    SELECT *
    FROM users
    WHERE address = $address;
}
// get_feed gets the 20 most recent posts from accounts a user follows, and takes an offset to specify where the counting should begin
action get_feed($username, $offset) public {
    SELECT p.id, p.title, p.content, p.post_date, u.username
    FROM posts AS p
    INNER JOIN followers AS f ON p.author_id = f.followed_id
    INNER JOIN users AS u ON u.id = f.followed_id
    WHERE f.follower_id = (
        SELECT id
        FROM users
        WHERE username = $username
    )
    ORDER BY date(p.post_date) DESC NULLS LAST
    LIMIT 20 OFFSET $offset;
}
// get_celebrity_feed gets the most recent posts from users that have more than 50000 followers
// and that are followed by the specified user
action get_celebrity_feed($username, $offset) public {
// using a CTE containing popular users
    WITH popular_users AS (
        SELECT followers.followed_id AS id, users.username AS username
        FROM followers
        INNER JOIN users ON users.id = followers.followed_id
        GROUP BY followers.followed_id
        HAVING count(followers.follower_id) >= 50000
    )
    SELECT p.id, p.title, p.content, p.post_date, pu.username
    FROM posts AS p
    INNER JOIN popular_users AS pu ON pu.id = p.author_id
    WHERE p.author_id IN (
        SELECT followed_id
        FROM followers
        WHERE follower_id = (
            SELECT id
            FROM users
            WHERE username = $username
        )
    )
    ORDER BY date(p.post_date) DESC NULLS LAST
    LIMIT 20 OFFSET $offset;
}